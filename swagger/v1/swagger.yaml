---
openapi: 3.0.1
info:
  title: API V1
  version: v1
components:
  securitySchemes:
    Bearer:
      description: "..."
      type: apiKey
      name: Authorization
      in: header
  schemas:
    error_response:
      type: object
      properties:
        error:
          type: number
      required:
      - error
    registration:
      type: object
      properties:
        user_id:
          type: string
        event_ids:
          type: array
          items:
            type: string
            format: EventId
      required:
      - user_id
      - event_ids
    registrationAdmin:
      type: object
      properties:
        user_id:
          type: string
        event_ids:
          type: array
          items:
            type: string
            format: EventId
        comment:
          type: string
          nullable: true
        admin_comment:
          type: string
          nullable: true
        guests:
          type: number
          nullable: true
        email:
          type: string
      required:
      - user_id
      - event_ids
    submitRegistrationBody:
      properties:
        user_id:
          type: string
        event_ids:
          type: array
          items:
            type: string
            format: EventId
        comment:
          type: string
        guests:
          type: number
      required:
      - user_id
      - event_ids
    updateRegistrationBody:
      properties:
        user_id:
          type: string
        event_ids:
          type: array
          items:
            type: string
            format: EventId
        comment:
          type: string
        admin_comment:
          type: string
        guests:
          type: number
      required:
      - user_id
      - event_ids
paths:
  "/api/v1/registrations/{competition_id}":
    get:
      summary: 'Public: list registrations for a given competition_id'
      parameters:
      - name: competition_id
        in: path
        required: true
        schema:
          type: string
      responses:
        '200':
          description: PASSING comp service down but registrations exist
          content:
            application/json:
              schema:
                type: array
                items:
                  "$ref": "#/components/schemas/registration"
        '404':
          description: Competition ID doesnt exist
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/error_response"
        '500':
          description: PASSING Competition service unavailable - 500 error
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/error_response"
        '502':
          description: PASSING Competition service unavailable - 502 error
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/error_response"
  "/api/v1/registrations/{competition_id}/admin":
    get:
      summary: 'Public: list registrations for a given competition_id'
      security:
      - Bearer: {}
      parameters:
      - name: competition_id
        in: path
        required: true
        schema:
          type: string
      responses:
        '200':
          description: PASSING organizer has access to comp 2
          content:
            application/json:
              schema:
                type: array
                items:
                  "$ref": "#/components/schemas/registrationAdmin"
        '403':
          description: PASSING organizer cannot access registrations for comps they
            arent organizing - multi comp auth
  "/api/v1/register":
    post:
      summary: Add an attendee registration
      security:
      - Bearer: {}
      parameters: []
      responses:
        '202':
          description: PASSING only required fields included
        '200':
          description: FAILING empty payload provided
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/registration"
        required: true
servers:
- url: https://{defaultHost}
  variables:
    defaultHost:
      default: registration.worldcubeassociation.org
