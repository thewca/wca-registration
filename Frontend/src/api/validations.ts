/**
 * This file was auto-generated by openapi-zod.
 * Do not make direct changes to the file.
 */


import { z } from 'zod';

export namespace components.schemas {
  export const error_response = z.object({
    error: z.number(),
  });
  export const success_response = z.object({
    status: z.string(),
    message: z.string(),
  });
  export const userIds = z.array(components["schemas"]["userId"]);
  export const userId = z.number();
  export const paymentInfo = z.object({
    id: z.number().int(),
    status: z.string().optional(),
  });
  export const userInfo = z.object({
    id: z.number(),
    name: z.string(),
    wca_id: z.string(),
    gender: z.string(),
    country_iso2: z.string(),
    url: z.string(),
    country: z.object({
      id: z.string(),
      name: z.string(),
      continentId: z.string(),
      iso2: z.string(),
    }),
    class: z.string(),
  });
  export const waitingListSpot = z.object({
    user_id: z.number().int().optional(),
    waiting_list_position: z.number().int().optional(),
  });
  export const waitingList = z.array(components["schemas"]["waitingListSpot"]);
  export const registration = z.object({
    user_id: z.number(),
    competing: z.object({
      event_ids: z.array(z.string()),
    }),
  });
  export const sortedRanking = z.object({
    user_id: z.string(),
    wca_id: z.string().optional(),
    single_rank: z.number(),
    single_best: z.number(),
    average_rank: z.number(),
    average_best: z.number(),
    pos: z.number(),
    tied_previous: z.boolean(),
  });
  export const psychSheet = z.object({
    sort_by: z.string(),
    sort_by_second: z.string().optional(),
    sorted_rankings: z.array(components["schemas"]["sortedRanking"]),
  });
  export const registrationAdmin = z.object({
    user_id: z.number(),
    competing: z.object({
      event_ids: z.array(z.string()),
      registered_on: z.string(),
      registration_status: z.string(),
      comment: z.string().nullable().optional(),
      admin_comment: z.string().nullable().optional(),
    }),
    guests: z.number().nullable().optional(),
  });
  export const submitRegistrationBody = z.object({
    user_id: z.number().int(),
    competition_id: z.string(),
    competing: z.object({
      event_ids: z.array(z.string()).optional(),
      comment: z.string().optional(),
      guests: z.number().optional(),
    }),
  });
  export const updateRegistrationBody = z.object({
    user_id: z.number().int(),
    competition_id: z.string(),
    competing: z.object({
      event_ids: z.array(z.string()).optional(),
      status: z.string().optional(),
      comment: z.string().optional(),
      admin_comment: z.string().optional(),
    }).optional(),
    guests: z.number().optional(),
  });
}

export const paths = {
  "/api/v1/users": {
    /** Private: Returns info about a list of users */
    post: {
      /** Private: Returns info about a list of users */
      requestBody: {
        content: {
          "application/json": z.object({
            ids: components["schemas"]["userIds"],
          }),
        },
      },
      responses: {
        /** @description Successfully returns UserInfo */
        200: {
          content: {
            "application/json": z.array(components["schemas"]["userInfo"]),
          },
        },
        /** @description Internal Server Error */
        500: {
          content: {
            "application/json": components["schemas"]["error_response"],
          },
        },
      },
    },
  },
  "/api/v1/{competition_id}/payment": {
    /** Public: Gets the Payment Id for the current User and Competition */
    get: {
      /** Public: Gets the Payment Id for the current User and Competition */
      parameters: {
        path: z.object({
          competition_id: z.string(),
        }),
      },
      responses: {
        /** @description Returns the payment info */
        200: {
          content: {
            "application/json": components["schemas"]["paymentInfo"],
          },
        },
        /** @description Missing Authentication */
        401: {
          content: {
            "application/json": components["schemas"]["error_response"],
          },
        },
        /** @description Internal Server Error */
        500: {
          content: {
            "application/json": components["schemas"]["error_response"],
          },
        },
      },
    },
  },
  "/api/v1/registrations/{competition_id}": {
    /** Public: list registrations for a given competition_id */
    get: {
      /** Public: list registrations for a given competition_id */
      parameters: {
        path: z.object({
          competition_id: z.string(),
        }),
      },
      responses: {
        /** @description Lists accepted registrations */
        200: {
          content: {
            "application/json": z.array(components["schemas"]["registration"]),
          },
        },
        /** @description Internal Server Error */
        500: {
          content: {
            "application/json": components["schemas"]["error_response"],
          },
        },
      },
    },
  },
  "/api/v1/registrations/{competition_id}/waiting": {
    /** Public: Gets the waiting list */
    get: {
      /** Public: Gets the waiting list */
      parameters: {
        path: z.object({
          competition_id: z.string(),
        }),
      },
      responses: {
        /** @description Lists */
        200: {
          content: {
            "application/json": components["schemas"]["waitingList"],
          },
        },
        /** @description Internal Server Error */
        500: {
          content: {
            "application/json": components["schemas"]["error_response"],
          },
        },
      },
    },
  },
  "/api/v1/psych_sheet/{competition_id}/{event_id}": {
    /** Private: Fetches the Psych Sheet for a given competition. The actual computation is handled by other Microservices */
    get: {
      /** Private: Fetches the Psych Sheet for a given competition. The actual computation is handled by other Microservices */
      parameters: {
        query: z.object({
          sort_by: z.string().optional(),
        }).optional(),
        path: z.object({
          competition_id: z.string(),
          event_id: z.string(),
        }),
      },
      responses: {
        /** @description Successfully passed down the Psych Sheet */
        200: {
          content: {
            "application/json": components["schemas"]["psychSheet"],
          },
        },
      },
    },
  },
  "/api/v1/registrations/{competition_id}/admin": {
    /** Public: list registrations for a given competition_id */
    get: {
      /** Public: list registrations for a given competition_id */
      parameters: {
        path: z.object({
          competition_id: z.string(),
        }),
      },
      responses: {
        /** @description Organizer has access to comp */
        200: {
          content: {
            "application/json": z.array(components["schemas"]["registrationAdmin"]),
          },
        },
        /** @description Organizer cannot access registrations for comps they arent organizing - multi comp auth */
        401: {
          content: {
            "application/json": components["schemas"]["error_response"],
          },
        },
      },
    },
  },
  "/api/v1/register": {
    /** Gets a single registrations */
    get: {
      /** Gets a single registrations */
      parameters: {
        query: z.object({
          user_id: z.number().int(),
          competition_id: z.string(),
        }),
      },
      responses: {
        /** @description Returns the Registration */
        200: {
          content: {
            "application/json": components["schemas"]["registrationAdmin"],
          },
        },
        /** @description Missing Authentication */
        401: {
          content: {
            "application/json": components["schemas"]["error_response"],
          },
        },
        /** @description Access Denied */
        403: {
          content: {
            "application/json": components["schemas"]["error_response"],
          },
        },
        /** @description Internal Server Error */
        500: {
          content: {
            "application/json": components["schemas"]["error_response"],
          },
        },
      },
    },
    /** Add an attendee registration */
    post: {
      /** Add an attendee registration */
      requestBody: {
        content: {
          "application/json": components["schemas"]["submitRegistrationBody"],
        },
      },
      responses: {
        /** @description Competitor submits basic registration */
        202: {
          content: {
            "application/json": components["schemas"]["success_response"],
          },
        },
        /** @description Empty payload provided */
        400: {
          content: {
            "application/json": components["schemas"]["error_response"],
          },
        },
        /** @description User impersonation (no admin permission, JWT token user_id does not match registration user_id) */
        401: {
          content: {
            "application/json": components["schemas"]["error_response"],
          },
        },
        /** @description User cant register while registration is closed */
        403: {
          content: {
            "application/json": components["schemas"]["error_response"],
          },
        },
        /** @description Competition does not exist */
        404: {
          content: {
            "application/json": components["schemas"]["error_response"],
          },
        },
        /** @description User registration exceeds guest limit */
        422: {
          content: {
            "application/json": components["schemas"]["error_response"],
          },
        },
      },
    },
    /** update or cancel an attendee registration */
    patch: {
      /** update or cancel an attendee registration */
      requestBody: {
        content: {
          "application/json": components["schemas"]["updateRegistrationBody"],
        },
      },
      responses: {
        /** @description User changes comment */
        200: {
          content: {
            "application/json": z.object({
              status: z.string().optional(),
              registration: components["schemas"]["registrationAdmin"].optional(),
            }),
          },
        },
        /** @description User requests invalid status change to their own registration */
        401: {
          content: {
            "application/json": components["schemas"]["error_response"],
          },
        },
        /** @description User changes events / other stuff past deadline */
        403: {
          content: {
            "application/json": components["schemas"]["error_response"],
          },
        },
        /** @description User does not include required comment */
        422: {
          content: {
            "application/json": components["schemas"]["error_response"],
          },
        },
        /** @description Internal Server Error */
        500: {
          content: {
            "application/json": components["schemas"]["error_response"],
          },
        },
      },
    },
  },
}
