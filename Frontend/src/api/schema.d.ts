/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  '/api/v1/registrations/{competition_id}': {
    /** List registrations for a given competition_id */
    get: {
      parameters: {
        path: {
          competition_id: string
        }
      }
      responses: {
        /** @description Valid competition_id but no registrations for it */
        200: {
          content: {
            'application/json': components['schemas']['registration'][]
          }
        }
        /** @description Competition ID doesnt exist */
        404: {
          content: {
            'application/json': components['schemas']['error_response']
          }
        }
        /** @description Competition service unavailable - 500 error */
        500: {
          content: {
            'application/json': components['schemas']['error_response']
          }
        }
        /** @description Competition service unavailable - 502 error */
        502: {
          content: {
            'application/json': components['schemas']['error_response']
          }
        }
      }
    }
  }
  '/api/v1/register': {
    /** Add an attendee registration */
    post: {
      parameters: {
        header?: {
          Authorization?: string
        }
      }
      requestBody: {
        content: {
          'application/json': components['schemas']['submitRegistrationBody']
        }
      }
      responses: {
        /** @description only required fields included */
        202: {
          content: {
            'application/json': components['schemas']['success_response']
          }
        }
        /** @description user impersonation attempt */
        403: {
          content: {
            'application/json': components['schemas']['error_response']
          }
        }
      }
    }
  }
}

export type webhooks = Record<string, never>

export interface components {
  schemas: {
    error_response: {
      error: number
    }
    success_response: {
      status: string
      message: string
    }
    registration: {
      user_id: string
      event_ids: EventId[]
    }
    registrationAdmin: {
      user_id: string
      event_ids: EventId[]
      comment?: string
      admin_comment?: string
      guests?: number
    }
    submitRegistrationBody: {
      user_id: string
      competition_id: string
      competing: {
        event_ids?: EventId[]
        comment?: string
        guests?: number
      }
    }
    updateRegistrationBody: {
      user_id: string
      event_ids: EventId[]
      comment?: string
      admin_comment?: string
      guests?: number
    }
  }
  responses: never
  parameters: never
  requestBodies: never
  headers: never
  pathItems: never
}

export type external = Record<string, never>

export type operations = Record<string, never>
