/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */


export interface paths {
  "/api/v1/registrations/{competition_id}": {
    /** Public: list registrations for a given competition_id */
    get: {
      parameters: {
        path: {
          competition_id: string;
        };
      };
      responses: {
        /** @description PASSING comp service down but registrations exist */
        200: {
          content: {
            "application/json": components["schemas"]["registration"][];
          };
        };
        /** @description PASSING Competition ID doesnt exist */
        404: {
          content: {
            "application/json": components["schemas"]["error_response"];
          };
        };
        /** @description PASSING Competition service unavailable - 500 error */
        500: {
          content: {
            "application/json": components["schemas"]["error_response"];
          };
        };
        /** @description PASSING Competition service unavailable - 502 error */
        502: {
          content: {
            "application/json": components["schemas"]["error_response"];
          };
        };
      };
    };
  };
  "/api/v1/registrations/{competition_id}/admin": {
    /** Public: list registrations for a given competition_id */
    get: {
      parameters: {
        path: {
          competition_id: string;
        };
      };
      responses: {
        /** @description PASSING organizer has access to comp 2 */
        200: {
          content: {
            "application/json": components["schemas"]["registrationAdmin"][];
          };
        };
        /** @description PASSING organizer cannot access registrations for comps they arent organizing - multi comp auth */
        401: {
          content: never;
        };
      };
    };
  };
  "/api/v1/register": {
    /** Add an attendee registration */
    post: {
      requestBody: {
        content: {
          "application/json": components["schemas"]["registration"];
        };
      };
      responses: {
        /** @description PASSING only required fields included */
        202: {
          content: never;
        };
        /** @description PASSING empty payload provided */
        400: {
          content: never;
        };
        /** @description PASSING user impersonation (no admin permission, JWWT token user_id does not match registration user_id) */
        401: {
          content: never;
        };
        /** @description PASSING comp not open */
        403: {
          content: never;
        };
      };
    };
  };
}

export type webhooks = Record<string, never>;

export interface components {
  schemas: {
    error_response: {
      error: number;
    };
    success_response: {
      status: string;
      message: string;
    };
    registration: {
      user_id: string;
      event_ids: EventId[];
    };
    registrationAdmin: {
      user_id: string;
      event_ids: EventId[];
      comment?: string | null;
      admin_comment?: string | null;
      guests?: number | null;
      email?: string;
    };
    submitRegistrationBody: {
      user_id: string;
      competition_id: string;
      competing: {
        event_ids?: EventId[];
        comment?: string;
        guests?: number;
      };
    };
    updateRegistrationBody: {
      user_id: string;
      event_ids: EventId[];
      comment?: string;
      admin_comment?: string;
      guests?: number;
    };
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}

export type $defs = Record<string, never>;

export type external = Record<string, never>;

export type operations = Record<string, never>;
